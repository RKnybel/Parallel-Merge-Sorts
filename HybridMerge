// MergeDemo.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
// This code was modified from Corman et al, ITA  by Joel Rosiene 2023
// This code was modified AGAIN from Joel Rosiene by Riley Knybel 2023

#include <string>
#include <cctype>
#include <algorithm>
#include <iostream>
#include <vector>
#include <execution>
#include <chrono>
#include <ppl.h>


bool Parallel = false;
const int gN = 8192; //the crossover point between sequential (low n) and parallel (high n)


inline int Find_Split_Point(int* A, int p, int r, int x)
{
    auto low = p;
    auto high = r + 1;

    while (low < high) {
        int mid = (low + high) >> 1;
        high = (x <= A[mid]) ? mid : high;
        low = (x <= A[mid]) ? low : mid + 1;

    }
    return low;

}

void P_Merge_Aux(int* A, int p1, int r1, int p2, int r2, int* B, int p3, bool parallel)
{

    if ((p1 > r1) && (p2 > r2)) return;
    if ((r1 - p1) < (r2 - p2)) {
        std::swap(r1, r2);
        std::swap(p1, p2);
    }
    int q1 = (p1 + r1) >> 1;
    int x = A[q1];

    int q2 = Find_Split_Point(A, p2, r2, x);

    int q3 = p3 + (q1 - p1) + (q2 - p2);
    //std::cout << "q1=" << q1 << "x=" << x << "q3=" << q3 << "\n";
    B[q3] = x;
    auto f1 = [&A, p1, q1, p2, q2, B, p3, parallel] { P_Merge_Aux(A, p1, q1 - 1, p2, q2 - 1, B, p3, parallel); };
    auto f2 = [&A, r1, q1, r2, q2, B, q3, parallel] { P_Merge_Aux(A, q1 + 1, r1, q2, r2, B, q3 + 1, parallel); };

    if ((parallel))
        concurrency::parallel_invoke(
            f1, f2
        );
    else {
        f1();
        f2();
    }
}

void P_Merge(int* A, const int p, const int q, const int r, bool parallel)
{
    std::vector<int> B(r - p + 1);

    P_Merge_Aux(A, p, q, q + 1, r, B.data() - p, p, parallel);
    //std::cout << "\n B \n";

    //std::cout << "{";
    //for (auto el : B)
        //std::cout << el << " ";
    //std::cout << "}";

    std::move(std::execution::par_unseq, B.begin(), B.end(), A + p);
    //std::move(B.begin(), B.end(), A + p);
    //std::cout << "\n *A:";

    //std::cout << "{";
    //for (int i = 0; i < 64; i++)
        //std::cout << A[i] << " ";
    //std::cout << "}";


}

void P_Merge_Sort(int* A, const int p, const int r, bool parallel)
{
    //std::cout << "p=" << p << "r=" << r << "\n";
    //if (p >= r) return;
    if (p >= r) return;
    int q = (p + r) >> 1;
    //std::cout << "p=" << p << "q=" << q << "r=" << r << "\n";
    //std::cout << "\n$$A";
    //for (int i = 0; i < 64; i++)
        //std::cout << A[i] << ",";
    //std::cout << "\n";

    //Switch to parallel based on input size
    // 
    parallel = (r - p) > gN;

    // use references for the arguments to prevent copies
    auto f1 = [A, p, q, parallel] { P_Merge_Sort(A, p, q, parallel); };
    auto f2 = [A, q, r, parallel] {P_Merge_Sort(A, q + 1, r, parallel); };
    if ((parallel))
        concurrency::parallel_invoke(
            f1,
            f2
        );
    else {
        f1();
        f2();
    }
    //std::cout << "\n!!A ";
    //for (int i = 0; i < 64; i++)
        //std::cout << A[i] << ",";
    //std::cout << "\n";
    P_Merge(A, p, q, r, parallel);
}





int main()
{
    const unsigned int N_Max = 1024 * 1024 * 16;
    //const unsigned int N_Max = 64;

    
    std::cout << "Threshold is " << gN << ", " << "Hybrid elapsed time \n";


    for (int it = 0; it < 10; it++) {
        std::cout << "Iteration " << it << std::endl;
        std::cout << "N  Runtime(us)  IsParallel" << std::endl;
        int N = 2;
        while (N <= N_Max)
        {

            std::vector<std::vector<int>> L_IN{ };
            std::vector<int> List{};
            for (auto i = 1; i <= N; ++i) {
                L_IN.push_back(std::vector<int>(1, N - i));
                List.push_back(N - i);
            }
            //std::cout << "\n unSorted \n";

            /*std::cout << "{";
            for (auto el : List)
                std::cout << el << " ";
            std::cout << "}";*/

            auto t1 = std::chrono::high_resolution_clock::now();

            P_Merge_Sort(List.data(), 0, N - 1, Parallel);

            auto t2 = std::chrono::high_resolution_clock::now();


            auto us_int = std::chrono::duration_cast<std::chrono::microseconds>(t2 - t1);
            std::cout << N << ", " << (long long)us_int.count() << "\n";
            //std::cout << "\n Sorted \n";

            /*std::cout << "{";
            for (auto el : List)
                std::cout << el << " ";
            std::cout << "}";*/
            N *= 2;
        }
    }





    return 0;
}
